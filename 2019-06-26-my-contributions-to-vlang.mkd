# 僕がV言語にやったこと

6月23日 午前3時頃，V言語がリリースされた．
V言語は以前から界隈で話題になっていたこともあり，最初「とりあえずビルドしてデモを動かして遊ぼうかな」
ぐらいの軽い気持ちでダウンロードしたのだった．
しかし，遊んでいるうちにいくつかの貢献ができたので，その内容をまとめておこうと思う．

## バグレポートの調査をした

今ではそんなことは少なくなってきているものの，リリース当初，比較的不安定だったことは否定できないと思う．
というのも，いざソースコードをクローンしてみると，ビルドがコケたり，シンプルなデモがセグフォで落ちたり，といったことが結構あった．

そういうわけで，issueにバグレポートが作られたりしていたんだけど，
自分の環境でも発生して困っているものがあったり，簡単に再現できるものも多かったため，
調査してワークアラウンドを投稿していたり，原因を説明したりした．

V言語は今の所，一旦C言語に変換され，実行可能な形式にするのはCコンパイラがやっていたりする．
そのため，デバッグにはgdbが使えたので，調査はだいたいバグを発生させてバックトレースを見る，という流れだった．

## バグフィクスや機能追加を行った

バグフィクスや機能追加に関するPRも投げた．
あんまり多いわけでもないので，とりあえず全部載せておく．

### [make `string.str` and `array.data` public](https://github.com/vlang/v/pull/375)

V言語の標準型に `string` と `array` というものがある．
標準ライブラリやデモの中には， なぜか `string.str` や `array.data` といった，公開されていないメンバを参照しているものがあり，コンパイル時にエラーが発生していた．

本来なら， `string.str()` や `array.data()` といったアクセサを実装するのが良さそうだったんだけど，
参照している箇所を全て修正するのは大変そうだったので，とりあえずの対処としてこれらのフィールドを公開するようにした．

### [remove gl_lin.v](https://github.com/vlang/v/pull/376)

V言語では，`_lin.v` で終わるファイルはLinux環境でのみ利用される．
`gl_lin.v` というファイルでは， `init_glad` という関数のみが定義されていたが，
この関数はプラットフォームで共通して使われる`gl.v` でも定義されていたため，二重に定義されている，という旨のエラーが発生していた．
`gl_lin.v` では `init_glad` を定義しているのみであったので，このファイルを削除した．

### [implement `float_calloc` function](https://github.com/vlang/v/pull/377)

一部のデモで使用されていた， `float_calloc` 関数が定義されていなかった．
というわけで，これを実装してPRを出したんだけど，実装の詳細について議論しているうちに他の人が修正をコミットし，このPRはマージされず．

### [fix `b_error` to `v_error`](https://github.com/vlang/v/pull/378)

関数名のタイポを修正したもの．`v_error`であるべき箇所が `b_error`となっていた．
キーボードが隣だから打ち間違えたんだろう．

### [Add thirdparty cjson](https://github.com/vlang/v/pull/412)

`thirdparty` ディレクトリを作成し，そこに依存ライブラリをサブモジュールとして置くようにしたもの．

このPRがマージされる以前は，各ユーザが手動で依存ライブラリをダウンロードし，適切な箇所に配置する必要があったのだが，
依存ライブラリはどこにも明記されておらず，try&errorで頑張る必要があった．

まぁ，ここまでは良いんだけど，PRを出す前にミスをしてしまい，`thirdparty`とすべきところを`thirdpaty`にしてしまっていた．
反省したい．

また，後にこんな感じで，足りない依存関係を出すようなPRも出している．
[add `khrplatform.h`](https://github.com/vlang/v/pull/506)


### [fix to read vroot from environent variable](https://github.com/vlang/v/pull/559)

V言語のソースコードが配置されているパスを検出する方法に修正を加えたもの．
これ以前は，`.vlang/VROOT`にパスを書いておき，コンパイラが読みに行くようになっていた．
なお，`.vlang/VROOT`が見つからない場合は，新しく作成し，ワーキングディレクトリを書き込むようになっていた．

このPRでは，ファイルではなく環境変数にパスを読むように変更を加えた．
理由は2つある．

* ユーザの許可なくホームディレクトリを汚すのがあまり好みでない
* パスをファイルから読むようにしたことで，標準ライブラリが使えない状態になっていた

2番目について少し解説すると，これは `thirdparty` 内のライブラリを使いたいときに問題が発生していた．

どういうことかと言うと．．．．
まず，以下のように，V言語ではソースコード内にCコンパイラに渡すフラグを設定できる．

```
#flag linux -I$HOME/code/v/thirdparty/hoge
#include "hoge.h"
```

このようにすれば，`thirdparty`内のライブラリを使いたい場合に，ライブラリが置かれたディレクトリにインクルードパスを通せる．

しかし，`VROOT` が導入された後は，`$HOME/code/v` にソースコードが置かれているとは限らないし，`VROOT`の値をフラグの中で使う方法はなかった．
というわけで， `$HOME/code/v/thirdparty/hoge` を参照したままになっていた標準ライブラリは，`$HOME/code/v`にソースコードを置いていない環境では利用できず，エラーが発生していた．

このPRでは `VROOT`という環境変数を利用しているので，単に `$VROOT/thirdparty/hoge` を参照すれば良い．

ただ，最終的にはこのPRはマージされなかった．
フラグの中で `@VROOT`というシンタックスが利用できるようになり，そちらが採用された．


### [add `unsetenv`, `setenv`, `clearenv` to os module](https://github.com/vlang/v/pull/583)

`os` モジュールに`unsetenv`, `setenv`, `clearenv` という3つの関数を追加したもの．

元々これらの関数は，以下のPRで環境変数を扱うために追加したものだったんだけど，PRがマージされなかったので別のPRを出した．

[fix to read vroot from environent variable](https://github.com/vlang/v/pull/559)


## そしてメンバーへ

そしてなんと，[vlang](https://github.com/vlang)のメンバーになることが出来た．
メンバーであれば，プロジェクトにカードを追加したり，フォークせずにレポジトリに直接ブランチを切ることが出来たりする．
ただ，僕はなんとなく，今も以前と同様フォーク先のレポジトリで開発をやっている．

あと，これまでコンパイラ周りにはあまり貢献できてない．
issueやソースコードを眺めていると，できそうなものが結構あったりするので，今後頑張っていきたい．
